# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kCloYi_HFMHme48hPyFwaOgcR879JVrx
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
!pip install pandas plotly dash dash-bootstrap-components
from dash import Dash, html, dcc
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc

# Initialize the app with a modern theme
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Load and clean data
df = pd.read_csv('/annonces_tayara.csv')
df['Prix'] = df['Prix'].replace('Non spécifié', pd.NA)
df['Prix'] = df['Prix'].str.extract('(\d+)').astype(float)
df['Ville'] = df['Localisation'].str.split(',').str[0]

# Calculate average prices by category
avg_price_by_category = df.groupby('Catégorie')['Prix'].mean().reset_index()

# Layout
app.layout = dbc.Container([
    html.H1('Tableau de Bord Immobilier Tayara',
            className='text-center my-4',
            style={'color': '#2c3e50'}),

    dbc.Row([
        # Category Distribution
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Distribution des Catégories"),
                dbc.CardBody(
                    dcc.Graph(id='category-pie')
                )
            ])
        ], width=6),

        # Location Distribution
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Nombre d'Annonces par Ville"),
                dbc.CardBody(
                    dcc.Graph(id='location-bar')
                )
            ])
        ], width=6)
    ]),

    html.Br(),

    dbc.Row([
        # Average Price by Category
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Prix Moyen par Catégorie"),
                dbc.CardBody(
                    dcc.Graph(id='price-category-bar')
                )
            ])
        ], width=12)
    ]),

    html.Br(),

    # Filters
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Filtres"),
                dbc.CardBody([
                    html.Label("Plage de Prix (DT)"),
                    dcc.RangeSlider(
                        id='price-range',
                        min=df['Prix'].min(),
                        max=df['Prix'].max(),
                        step=1000,
                        marks={i: f'{i:,.0f}DT' for i in range(
                            int(df['Prix'].min()),
                            int(df['Prix'].max()),
                            int((df['Prix'].max() - df['Prix'].min()) / 10)
                        )},
                        value=[df['Prix'].min(), df['Prix'].max()]
                    )
                ])
            ])
        ], width=12)
    ])
], fluid=True)

# Callbacks
@app.callback(
    [Output('category-pie', 'figure'),
     Output('location-bar', 'figure'),
     Output('price-category-bar', 'figure')],
    [Input('price-range', 'value')]
)
def update_graphs(price_range):
    # Filter data based on price range
    filtered_df = df[
        (df['Prix'] >= price_range[0]) &
        (df['Prix'] <= price_range[1])
    ]

    # Category distribution
    category_fig = px.pie(
        filtered_df,
        names='Catégorie',
        title='Distribution des Catégories',
        template='plotly_white'
    )

    # Location distribution
    location_counts = filtered_df['Ville'].value_counts().head(10)
    location_fig = px.bar(
        x=location_counts.index,
        y=location_counts.values,
        title='Top 10 Villes par Nombre d\'Annonces',
        labels={'x': 'Ville', 'y': 'Nombre d\'annonces'},
        template='plotly_white'
    )

    # Average price by category
    avg_price = filtered_df.groupby('Catégorie')['Prix'].mean().reset_index()
    price_cat_fig = px.bar(
        avg_price,
        x='Catégorie',
        y='Prix',
        title='Prix Moyen par Catégorie',
        labels={'Prix': 'Prix Moyen (DT)'},
        template='plotly_white'
    )

    return category_fig, location_fig, price_cat_fig

if __name__ == '__main__':
    app.run(debug=True)

